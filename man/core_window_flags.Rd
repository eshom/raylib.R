% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example_core_window_flags.R
\name{core_window_flags}
\alias{core_window_flags}
\title{Window Flags example}
\description{
This example shows the window flags that can be set to manipulate the way
in which the window is launch and run.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

play_game <- function() {

        ##################
        # Initialization #
        ##################

        screen_width <- 800
        screen_height <- 450

        # Possible window flags:
        # ------------------------------
        # config_flags$FLAG_VSYNC_HINT
        # config_flags$FLAG_FULLSCREEN_MODE   -> not working properly (wrong scaling)
        # config_flags$FLAG_WINDOW_RESIZABLE
        # config_flags$FLAG_WINDOW_UNDECORATED
        # config_flags$FLAG_WINDOW_TRANSPARENT
        # config_flags$FLAG_WINDOW_HIDDEN
        # config_flags$FLAG_WINDOW_MINIMIZED   -> not supported of window creation
        # config_flags$FLAG_WINDOW_MAXIMIZED   -> not supported on window creation
        # config_flags$FLAG_WINDOW_UNFOCUSED
        # config_flags$FLAG_WINDOW_TOPMOST
        # config_flags$FLAG_WINDOW_HIGHDPI     -> errors after minimize-resize, fb size is recalculated
        # config_flags$FLAG_WINDOW_ALWAYS_RUN
        # config_flags$FLAG_MSAA_4X_HINT

        # Set configuration flags for window creation
        # set_config_flags(config_flags$FLAG_VSYNC_HINT | config_flags$FLAG_MSAA_4X_HINT | config_flags$FLAG_WINDOW_HIGHDPI)

        init_window(screen_width, screen_height, "raylib [core] example - window flags")
        # set up the automatic de-initialization
        on.exit(close_window())

        ball_position <- Vector2(get_screen_width() / 2, get_screen_height() / 2)
        ball_speed <- Vector2(5, 4)
        ball_radius <- 20

        frames_counter <- 0

        set_target_fps(60)

        ##################
        # Main game loop #
        ##################

        while(!window_should_close()) {

                # window state setters ####
                if (is_key_pressed(keyboard_key$KEY_F))
                        toggle_fullscreen()

                if (is_key_pressed(keyboard_key$KEY_R)) {
                        if (is_window_state(config_flags$FLAG_WINDOW_RESIZABLE))
                                clear_window_state(config_flags$FLAG_WINDOW_RESIZABLE)
                        else
                                set_window_state(config_flags$FLAG_WINDOW_RESIZABLE)
                }

                if (is_key_pressed(keyboard_key$KEY_D)) {
                        if (is_window_state(config_flags$FLAG_WINDOW_UNDECORATED))
                                clear_window_state(config_flags$FLAG_WINDOW_UNDECORATED)
                        else
                                set_window_state(config_flags$FLAG_WINDOW_UNDECORATED)
                }

                if (is_key_pressed(keyboard_key$KEY_H)) {
                        if (!is_window_state(config_flags$FLAG_WINDOW_HIDDEN))
                                set_window_state(config_flags$FLAG_WINDOW_HIDDEN)
                        frames_counter <- 0
                }

                if (is_window_state(config_flags$FLAG_WINDOW_HIDDEN)) {
                        frames_counter <- frames_counter + 1
                        if (frames_counter >= 240) # show window after ~ 3 seconds
                                clear_window_state(config_flags$FLAG_WINDOW_HIDDEN)
                }

                if (is_key_pressed(keyboard_key$KEY_N)) {
                        if (!is_window_state(config_flags$FLAG_WINDOW_MINIMIZED))
                                set_window_state(config_flags$FLAG_WINDOW_MINIMIZED)
                        frames_counter <- 0
                }

                if (is_window_state(config_flags$FLAG_WINDOW_MINIMIZED)) {
                        frames_counter <- frames_counter + 1
                        if (frames_counter >= 240) # show window after ~ 3 seconds
                                clear_window_state(config_flags$FLAG_WINDOW_MINIMIZED)
                }

                if (is_key_pressed(keyboard_key$KEY_M)) {
                        # requires FLAG_WINDOW_RESIZABLE enabmled;
                        if (is_window_state(config_flags$FLAG_WINDOW_MAXIMIZED))
                                restore_window()
                        else maximize_window()
                }

                if (is_key_pressed(keyboard_key$KEY_U)) {
                        if (is_window_state(config_flags$FLAG_WINDOW_UNFOCUSED))
                                clear_window_state(config_flags$FLAG_WINDOW_UNFOCUSED)
                        else set_window_state(config_flags$FLAG_WINDOW_UNFOCUSED)
                }

                if (is_key_pressed(keyboard_key$KEY_T)) {
                        if (is_window_state(config_flags$FLAG_WINDOW_TOPMOST))
                                clear_window_state(config_flags$FLAG_WINDOW_TOPMOST)
                        else set_window_state(config_flags$FLAG_WINDOW_TOPMOST)
                }

                if (is_key_pressed(keyboard_key$KEY_A)) {
                        if (is_window_state(config_flags$FLAG_WINDOW_ALWAYS_RUN))
                                clear_window_state(config_flags$FLAG_WINDOW_ALWAYS_RUN)
                        else set_window_state(config_flags$FLAG_WINDOW_ALWAYS_RUN)
                }

                if (is_key_pressed(keyboard_key$KEY_V)) {
                        if (is_window_state(config_flags$FLAG_VSYNC_HINT))
                                clear_window_state(config_flags$FLAG_VSYNC_HINT)
                        else set_window_state(config_flags$FLAG_VSYNC_HINT)
                }

                # bouncing ball logic ####
                ball_position["x"] <- ball_position["x"] + ball_speed["x"]
                ball_position["y"] <- ball_position["y"] + ball_speed["y"]
                if ((ball_position["x"]) >= (get_screen_width() - ball_radius) ||
                    (ball_position["x"] <= ball_radius))
                        ball_speed["x"] <- ball_speed["x"] * -1
                if ((ball_position["y"]) >= (get_screen_height() - ball_radius) ||
                    (ball_position["y"] <= ball_radius))
                        ball_speed["y"] <- ball_speed["y"] * -1

                # Draw ####
                begin_drawing()

                if (is_window_state(config_flags$FLAG_WINDOW_TRANSPARENT))
                        clear_background(raylib_color$BLANK)
                else
                        clear_background(raylib_color$RAYWHITE)

                draw_circle_v(ball_position, ball_radius, raylib_color$MAROON)
                draw_rectangle_lines_ex(Rectangle(0, 0, get_screen_width(), get_screen_height()), 4, raylib_color$RAYWHITE)

                draw_circle_v(get_mouse_position(), 10, raylib_color$DARKBLUE)
                draw_fps(10, 10)
                draw_text(sprintf("Screen Size: [\%i, \%i]", get_screen_width(), get_screen_height()), 10, 40, 10, raylib_color$GREEN)

                # window state info
                draw_text("Following flags can be set after window creation:", 10, 60, 10, raylib_color$GRAY)
                if (is_window_state(config_flags$FLAG_FULLSCREEN_MODE))
                        draw_text("[F] FLAG_FULLSCREEN_MODE: on", 10, 80, 10, raylib_color$LIME)
                else
                        draw_text("[F] FLAG_FULLSCREEN_MODE: off", 10, 80, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_RESIZABLE))
                        draw_text("[R] FLAG_WINDOW_RESIZABLE: on", 10, 100, 10, raylib_color$LIME)
                else
                        draw_text("[R] FLAG_WINDOW_RESIZABLE: off", 10, 100, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_UNDECORATED))
                        draw_text("[D] FLAG_WINDOW_UNDECORATED: on", 10, 120, 10, raylib_color$LIME)
                else
                        draw_text("[D] FLAG_WINDOW_UNDECORATED: off", 10, 120, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_HIDDEN))
                        draw_text("[H] FLAG_WINDOW_HIDDEN: on", 10, 140, 10, raylib_color$LIME)
                else
                        draw_text("[H] FLAG_WINDOW_HIDDEN: off", 10, 140, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_MINIMIZED))
                        draw_text("[N] FLAG_WINDOW_MINIMIZED: on", 10, 160, 10, raylib_color$LIME)
                else
                        draw_text("[N] FLAG_WINDOW_MINIMIZED: off", 10, 160, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_MAXIMIZED))
                        draw_text("[M] FLAG_WINDOW_MAXIMIZED: on", 10, 180, 10, raylib_color$LIME)
                else
                        draw_text("[M] FLAG_WINDOW_MAXIMIZED: off", 10, 180, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_UNFOCUSED))
                        draw_text("[G] FLAG_WINDOW_UNFOCUSED: on", 10, 200, 10, raylib_color$LIME)
                else
                        draw_text("[G] FLAG_WINDOW_UNFOCUSED: off", 10, 200, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_TOPMOST))
                        draw_text("[T] FLAG_WINDOW_TOPMOST: on", 10, 220, 10, raylib_color$LIME)
                else
                        draw_text("[T] FLAG_WINDOW_TOPMOST: off", 10, 220, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_ALWAYS_RUN))
                        draw_text("[A] FLAG_WINDOW_ALWAYS_RUN: on", 10, 240, 10, raylib_color$LIME)
                else
                        draw_text("[A] FLAG_WINDOW_ALWAYS_RUN: off", 10, 240, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_VSYNC_HINT))
                        draw_text("[V] FLAG_VSYNC_HINT: on", 10, 260, 10, raylib_color$LIME)
                else
                        draw_text("[V] FLAG_VSYNC_HINT: off", 10, 260, 10, raylib_color$MAROON)

                draw_text("Following flags can only be set before window creation:", 10, 300, 10, raylib_color$GRAY)
                if (is_window_state(config_flags$FLAG_WINDOW_HIGHDPI))
                        draw_text("FLAG_WINDOW_HIGHDPI: on", 10, 320, 10, raylib_color$LIME)
                else
                        draw_text("FLAG_WINDOW_HIGHDPI: off", 10, 320, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_WINDOW_TRANSPARENT))
                        draw_text("FLAG_WINDOW_TRANSPARENT: on", 10, 340, 10, raylib_color$LIME)
                else
                        draw_text("FLAG_WINDOW_TRANSPARENT: off", 10, 340, 10, raylib_color$MAROON)
                if (is_window_state(config_flags$FLAG_MSAA_4X_HINT))
                        draw_text("FLAG_MSAA_4X_HINT: on", 10, 360, 10, raylib_color$LIME)
                else
                        draw_text("FLAG_MSAA_4X_HINT: off", 10, 360, 10, raylib_color$MAROON)

                end_drawing()
        }
}

###################
# LAUNCH THE GAME #
###################

play_game()
\dontshow{\}) # examplesIf}
}
\seealso{
Other Core examples: 
\code{\link{core_2d_camera}},
\code{\link{core_2d_platformer}},
\code{\link{core_3d_camera_first_person}},
\code{\link{core_3d_camera_free}},
\code{\link{core_3d_camera}},
\code{\link{core_basic_screen_manager}},
\code{\link{core_basic_window}},
\code{\link{core_drop_files}},
\code{\link{core_input_keys}},
\code{\link{core_input_mouse}}
}
\concept{Core examples}
