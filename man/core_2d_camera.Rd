% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example_core_2d_camera.R
\name{core_2d_camera}
\alias{core_2d_camera}
\title{Interactive 2D Camera}
\description{
Interactive 2D Camera
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
MAX_BUILDINGS <- 100

####################
## Initialization ##
####################
screen_width <- 800
screen_height <- 450

init_window(screen_width, screen_height, "raylib [core] example - 2d camera")

player <- Rectangle(400, 280, 40, 40)

construct_building <- function(screen_width, screen_height, spacing) {
       build <- Rectangle(0, 0, 0, 0)

       build["width"] <- runif(1, 50, 200)
       build["height"] <- runif(1, 100, 800)
       build["y"] <- screen_height - 130 - build["height"]
       build["x"] <- -6000 + spacing

       build
}

spacing <- 0
buildings <- vector("list", MAX_BUILDINGS)
for (i in seq_len(length(buildings))) {
       buildings[[i]] <- construct_building(screen_width, screen_height, spacing)
       spacing <- spacing + buildings[[i]]["width"]
}

random_colors <- function(n) {
       cols <- data.frame(red = runif(n, 200, 240), green = runif(n, 200, 240),
                          blue = runif(n, 200, 250), alpha = 255)

       as.list(as.data.frame(t(cols)))
}

build_colors <- random_colors(MAX_BUILDINGS)

camera <- Camera2D(target = Vector2(player["x"] + 20, player["y"] + 20),
                  offset = Vector2(screen_width / 2, screen_height / 2),
                  rotation = 0,
                  zoom = 1)

set_target_fps(60) # Set our game to run at 60 frames-per-second

####################
## Main game loop ##
####################
while (!window_should_close()) { # Detect window close button or ESC key
       ############
       ## Update ##
       ############

       ## Player movement
       if (is_key_down(keyboard_key$KEY_RIGHT))
               player["x"] <- player["x"] + 2
       else if (is_key_down(keyboard_key$KEY_LEFT))
               player["x"] <- player["x"] - 2

       ## Camera target follows player
       camera$target <- c(player["x"] + 20, player["y"] + 20)

       ## Camera rotation controls
       if (is_key_down(keyboard_key$KEY_A))
               camera$rotation <- camera$rotation - 1
       else if (is_key_down(keyboard_key$KEY_S))
               camera$rotation <- camera$rotation + 1

       ## Camera zoom controls
       camera$zoom <- camera$zoom + get_mouse_wheel_move() * 0.05

       if (camera$zoom > 3)
               camera$zoom <- 3
       else if (camera$zoom < 0.1)
               camera$zoom <- 0.1

       ## Camera reset (zoom and rotation)

       if (is_key_pressed(keyboard_key$KEY_R)) {
               camera$zoom <- 1
               camera$rotation <- 0
       }

       ##########
       ## Draw ##
       ##########
       begin_drawing()
       {
               clear_background(raylib_color$RAYWHITE)

               begin_mode_2d(camera)
               {
                       draw_rectangle(-6000, 320, 13000, 8000, raylib_color$DARKGRAY)

                       Map(draw_rectangle_rec, buildings, build_colors)

                       draw_rectangle_rec(player, raylib_color$RED)

                       draw_line(camera$target["x"], -screen_height * 10, camera$target["x"],
                                 screen_height * 10, raylib_color$GREEN)
                       draw_line(-screen_width * 10, camera$target["y"], screen_width * 10,
                                 camera$target["y"], raylib_color$GREEN)
               }
               end_mode_2d()

               draw_text("SCREEN AREA", 640, 10, 20, raylib_color$RED)

               draw_rectangle(0, 0, screen_width, 5, raylib_color$RED)
               draw_rectangle(0, 5, 5, screen_height - 10, raylib_color$RED)
               draw_rectangle(screen_width - 5, 5, 5, screen_height - 10, raylib_color$RED)
               draw_rectangle(0, screen_height - 5, screen_width, 5, raylib_color$RED)

               ## not implemented yet
               draw_rectangle(10, 10, 250, 113, fade(raylib_color$SKYBLUE, 0.5))
               draw_rectangle_lines(10, 10, 250, 113, raylib_color$BLUE)

               draw_text("Free 2d camera controls:", 20, 20, 10, raylib_color$BLACK)
               draw_text("- Right/Left to move Offset", 40, 40, 10, raylib_color$DARKGRAY)
               draw_text("- Mouse Wheel to Zoom in-out", 40, 60, 10, raylib_color$DARKGRAY)
               draw_text("- A / S to Rotate", 40, 80, 10, raylib_color$DARKGRAY)
               draw_text("- R to reset Zoom and Rotation", 40, 100, 10, raylib_color$DARKGRAY)
       }
       end_drawing()
}

#######################
## De-Initialization ##
#######################
close_window() # Close window and OpenGL context
\dontshow{\}) # examplesIf}
}
\seealso{
Other Core examples: 
\code{\link{core_2d_platformer}},
\code{\link{core_3d_camera_first_person}},
\code{\link{core_3d_camera_free}},
\code{\link{core_3d_camera}},
\code{\link{core_basic_screen_manager}},
\code{\link{core_basic_window}},
\code{\link{core_drop_files}},
\code{\link{core_input_keys}},
\code{\link{core_input_mouse}},
\code{\link{core_window_flags}}
}
\concept{Core examples}
